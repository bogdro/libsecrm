2007-11-11	Bogdan Drozdowski <bogdandr@op.pl>

	* libsecrm version 0.7
	  Using old wipe-anything technique if new signal+fcntl is not
	  available. Signal & fcntl stuff now only in one function (called
	  for every wiping). Renaming libsecrm.h to libsecrm-priv.h
	  Libsecrm is now a library for developers, too. It has a header file
	  - ${prefix}/include/libsecrm.h and a "import library" libsecrm.a.
	  Big portability corrections, some to non-ANSI compilers. Libsecrm
	  now compiles on OpenBSD. Checking compiler options instead of
	  asuuming them.
	* libsecrm-priv.h: internal header file renamed from libsecrm.h.
	  Defining ftruncate/64, if needed. Defining path separator (needed
	  for opening the banning files).
	* lsr_unlink.c (__lsr_rename): fixed bugs with strncpy(). Now
	  returning NULL in case of error instead of the old name. Syncing
	  only if necessary (number of passes > 1).
	* docs: more requirements for compiling. Adding info saying
	  that write permissions to the file being wiped are required. Minor
	  corrections. Added info about not supporting the syscall()
	  functions. Added info on using libsecrm as a development library.
	* libsecrm.c: some cleanup. Fixed not closing ban files before return.
	  Fixed stack error. Fixed banning - empty lines always matched.
	* lsr_opens.c (open, open64): removed useless doubled checking.
	* lsr_creat.c: supporting the creat() and creat64() functions.
	* configure.ac:  Checking for renameat() existence. Checking for
	  F_SETLEASE, F_GETSIG and F_SETSIG and printing a warning if not
	  available. Better portability.
	* libsecrm.h: public interface header file. Old contents renamed to
	  libsecrm-priv.h
	* lsr_public.c: public interface source file.
	* lsr_truncate.c (__lsr_fd_truncate): fsync()ing only if number
	  of passes > 1. Memory leak fixed.

2007-09-16	Bogdan Drozdowski <bogdandr@op.pl>

	* libsecrm version 0.6.
	  Better signal handling (needed because of the Xpdf/libfreetype
	  issue). Adding support for banning programs and files from
	  messing with them, via config files in ${prefix}/etc. More
	  info in the docs. 64-bit functions now active.
	* configure.ac: Better portability.

2007-09-08	Bogdan Drozdowski <bogdandr@op.pl>

	* libsecrm version 0.5
	* better portability (checking for the 'long long' type). Xpdf issue
	  fixed, but only on sysmes with GNU/Linux kernel >= 2.4 (using
	  fcntl() to check if a file is already open). Better error handling.
	* lsr_opens.c: non-serious bugs fixed.

2007-08-06	Bogdan Drozdowski <bogdandr@op.pl>

	* libsecrm version 0.4 (0.3 lived less than half a day on the net)
	* Switched to GPLv3. New compile macro 'BUF_SIZE' in CFLAGS available.
	  Using #pragmas for better compile-time error checking.
	* lsr_truncate.c: Checking if file is regular or a link instead
	  of checking simply for non-directories. Memory leaks fixed.
	  One function for all actions. Making 'buf' and 'seleced' local
	  helps process/thread-safety. No action is taken if stat() is not
	  available, stat() returns error or file is not a regular file/link.
	  Portability corrections. More error checking. Openeing files in
	  exclusive mode.
	* lsr_unlink.c: Portability corrections. Using stat64/lstat64/fstat64,
	  if the system uses it. Single function for renaming files. Renaming
	  done only if action will be taken, not unconditionally. Sync after
	  each rename. No action is taken if lstat()/fstat() is not available,
	  it returns an error or the object is not a regular file.
	  Workaround an issue with Kate/DCOP: if file name matches
	  ".ICEauthority", the file is NOT wiped and NOT truncated.
	  Workaround an issue with BASH and here-documents: if file name
	  matches "sh-thd-", the file is NOT wiped and NOT truncated. BASH
	  unlinks the file before reading from it.
	* libsecrm.h: Better compile-time macro 'PASSES' handling. Separating
	  64 bit and non-64 bit versions. More 'const'. Conditionally declare
	  renameat().
	* lsr_opens.c (freopen, freopen64): Using ftruncate/64 instead of
	  truncate/64, because the file may have been opened in some kind
	  of exclusive mode and normal truncate would fail as it would need
	  to open the file once more. This also doesn't increase the number
	  of file handles associated with the same file. If getting the file
	  descriptor fails, truncate/64 is used.
	* lsr_opens.c (fdopen): removed, because the original function never
	  wipes any data (man fdopen).
	* doc update with full texts of licences.

2007-07-14	Bogdan Drozdowski <bogdandr@op.pl>

	* libsecrm version 0.2.
	* lsr_unlink.c (unlink, unlinkat): Bugs fixed.
	* lsr_unlink.c: Better error handling. Memory checks.
	* lsr_opens.c: Better error handling.

2007-07-08	Bogdan Drozdowski <bogdandr@op.pl>

	* First release of libsecrm, version 0.1.
	  Replaces the following functions: fopen, freopen, fdopen, open,
	  openat, unlink, unlinkat, truncate, ftruncate (or the 64-bit
	  versions of these, if needed).

