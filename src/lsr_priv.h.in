/*
 * A library for secure removing files.
 *	-- private header file
 *
 * Copyright (C) 2007-2021 Bogdan Drozdowski, bogdro (at) users . sourceforge . net
 * License: GNU General Public License, v3+
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foudation:
 *		Free Software Foundation
 *		51 Franklin Street, Fifth Floor
 *		Boston, MA 02110-1301
 *		USA
 */

#ifndef LSR_HEADER
# define LSR_HEADER 1

# undef LSR_ATTR
# ifdef __GNUC__
#  define LSR_ATTR(x)	__attribute__(x)
# else
#  define LSR_ATTR(x)
# endif

# ifndef GCC_WARN_UNUSED_RESULT
/*
 if the compiler doesn't support this, define this to an empty string,
 so that everything compiles (just in case)
 */
#  define GCC_WARN_UNUSED_RESULT /*LSR_ATTR((warn_unused_result))*/
# endif

/* LSR_PARAMS is a macro used to wrap function prototypes, so that
        compilers that don't understand ANSI C prototypes still work,
        and ANSI C compilers can issue warnings about type mismatches. */
# undef LSR_PARAMS
# if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
#  define LSR_PARAMS(protos) protos
#  define LSR_ANSIC
# else
#  define LSR_PARAMS(protos) ()
#  undef LSR_ANSIC
# endif

# undef		LSR_NPAT

# ifdef	LSR_WANT_RANDOM	/* shred-like method */
#  define LSR_NPAT 22
#  ifndef  LSR_PASSES
#   define LSR_PASSES (LSR_NPAT+3)
#  else
#   if    LSR_PASSES < 1
#    undef  LSR_PASSES
#    define LSR_PASSES (LSR_NPAT+3)
#   endif
#  endif
# endif

# if (! defined LSR_NPAT) && (defined LSR_WANT_SCHNEIER) /* Schneier's method */
#  define LSR_NPAT 2
#  ifndef  LSR_PASSES
#   define LSR_PASSES (LSR_NPAT+5)
#  else
#   if    LSR_PASSES < 1
#    undef  LSR_PASSES
#    define LSR_PASSES (LSR_NPAT+5)
#   endif
#  endif
# endif

# if (! defined LSR_NPAT) && (defined LSR_WANT_DOD)	/* DoD method */
#  define LSR_NPAT 2
#  ifndef  LSR_PASSES
#   define LSR_PASSES (LSR_NPAT+1)
#  else
#   if    LSR_PASSES < 1
#    undef  LSR_PASSES
#    define LSR_PASSES (LSR_NPAT+1)
#   endif
#  endif
# endif

# if (! defined LSR_NPAT)	/* Gutmann method - the default */
#  define LSR_NPAT (22+5)
#  ifndef  LSR_PASSES
#   define LSR_PASSES (LSR_NPAT+9)
#  else
#   if    LSR_PASSES < 1
#    undef  LSR_PASSES
#    define LSR_PASSES (LSR_NPAT+9)
#   endif
#  endif
# endif

# ifndef  LSR_BUF_SIZE
#  define LSR_BUF_SIZE (1024*1024)
# else
#  if    (LSR_BUF_SIZE < 1) || (LSR_BUF_SIZE > 2147483647)
#   undef  LSR_BUF_SIZE
#   define LSR_BUF_SIZE (1024*1024)
#  endif
# endif

# define _LARGEFILE64_SOURCE 1
/*# define _FILE_OFFSET_BITS 64*/

# ifdef HAVE_SYS_TYPES_H
#  include <sys/types.h>	/* size_t, off_t (otherwise #define'd by 'configure'), off64_t */
# endif
# ifdef HAVE_STDINT_H
#  include <stdint.h>		/* intptr_t */
# endif
# ifdef HAVE_INTTYPES_H
#  include <inttypes.h>		/* intptr_t */
# endif
# ifndef HAVE_INTPTR_T
typedef int intptr_t;
# endif

# ifndef HAVE_SSIZE_T
typedef int ssize_t;
# endif

# ifndef HAVE_OFF64_T
#  ifdef HAVE_LONG_LONG
typedef long long int off64_t;
#  else
typedef long int off64_t;
#  endif
# endif

# ifndef HAVE_MODE_T
typedef unsigned short int mode_t;
# endif

# include <stdio.h>		/* renameat() and FILE structure definition */

# if (defined __USE_FILE_OFFSET64) || (defined __USE_LARGEFILE64)
#  define LSR_USE64 1
# else
#  undef LSR_USE64
#  ifndef lseek64
#   define lseek64	lseek
#  endif
# endif

# ifdef HAVE_UNISTD_H
#  include <unistd.h>
# else
#  ifdef __cplusplus
extern "C" {
#  endif

/* Only these need to be defined, because only these get called explicitly. */
extern int truncate LSR_PARAMS ((const char *path, off_t length));
#  if (!defined truncate64)
extern int truncate64 LSR_PARAMS ((const char *path, off64_t length));
#  endif
extern int ftruncate LSR_PARAMS ((int fd, off_t length));
#  if (!defined ftruncate64)
extern int ftruncate64 LSR_PARAMS ((int fd, off64_t length));
#  endif

#  ifdef __cplusplus
}
#  endif

# endif

# ifdef __GNUC__
#  ifndef strcat
#   pragma GCC poison strcat
#  endif
#  ifndef strcpy
#   pragma GCC poison strcpy
#  endif
#  pragma GCC poison gets fdopen __lsr_real_fdopen
# endif

typedef int	(*i_cp)		LSR_PARAMS ((const char * const name));
typedef int	(*i_i_cp_i)	LSR_PARAMS ((const int dir_fd, const char * const pathname, const int flags));
typedef int	(*i_cp_o)	LSR_PARAMS ((const char * const path, const off_t length));
typedef int	(*i_i_o)	LSR_PARAMS ((const int fd, const off_t length));
typedef FILE*	(*fp_cp_cp)	LSR_PARAMS ((const char * const name, const char * const mode));
typedef FILE*	(*fp_cp_cp_fp)	LSR_PARAMS ((const char * const name, const char * const mode, FILE* stream));
typedef int	(*i_cp_i_)	LSR_PARAMS ((const char * const name, const int flags, ...));
typedef int	(*i_i_cp_i_)	LSR_PARAMS ((const int dir_fd, const char * const pathname, const int flags, ...));
typedef int	(*i_cp_o64)	LSR_PARAMS ((const char * const path, const off64_t length));
typedef int	(*i_i_o64)	LSR_PARAMS ((const int fd, const off64_t length));
typedef int	(*i_cp_mt)	LSR_PARAMS ((const char * const name, const mode_t mode));
typedef int	(*i_o_o)	LSR_PARAMS ((int fd, off_t offset, off_t len));
typedef int	(*i_o64_o64)	LSR_PARAMS ((int fd, off64_t offset, off64_t len));
typedef int	(*i_i_i_o_o)	LSR_PARAMS ((int fd, int mode, off_t offset, off_t len));

/* memory-related functions: */
typedef void*	(*f_s)		LSR_PARAMS ((size_t size));
typedef int	(*vpp_s_s)	LSR_PARAMS ((void **memptr, size_t alignment, size_t size));
typedef void*	(*f_s_s)	LSR_PARAMS ((size_t boundary, size_t size));
					/* intentionally more indented: */
typedef @BRK_RETTYPE@	(*f_vp)		LSR_PARAMS ((@BRK_ARGTYPE@ end_data_segment));
typedef @SBRK_RETTYPE@	(*f_ip)		LSR_PARAMS ((@SBRK_ARGTYPE@ increment));


# ifdef __cplusplus
extern "C" {
# endif

extern GCC_WARN_UNUSED_RESULT	i_cp		__lsr_real_unlink_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp		__lsr_real_remove_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_cp_i	__lsr_real_unlinkat_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp		__lsr_real_rmdir_location LSR_PARAMS ((void));

extern GCC_WARN_UNUSED_RESULT	fp_cp_cp	__lsr_real_fopen64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	fp_cp_cp_fp	__lsr_real_freopen64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_i_		__lsr_real_open64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_cp_i_	__lsr_real_openat64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_o64	__lsr_real_truncate64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_o64		__lsr_real_ftruncate64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_mt		__lsr_real_creat64_location LSR_PARAMS ((void));

extern GCC_WARN_UNUSED_RESULT	fp_cp_cp	__lsr_real_fopen_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	fp_cp_cp_fp	__lsr_real_freopen_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_i_		__lsr_real_open_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_cp_i_	__lsr_real_openat_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_o		__lsr_real_truncate_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_o		__lsr_real_ftruncate_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_cp_mt		__lsr_real_creat_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_o_o		__lsr_real_posix_fallocate_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_o64_o64	__lsr_real_posix_fallocate64_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	i_i_i_o_o	__lsr_real_fallocate_location LSR_PARAMS ((void));

/* memory-related functions: */
extern GCC_WARN_UNUSED_RESULT	f_s		__lsr_real_malloc_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	vpp_s_s		__lsr_real_psx_memalign_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_s		__lsr_real_valloc_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_s		__lsr_real_pvalloc_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_s_s		__lsr_real_memalign_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_s_s		__lsr_real_aligned_alloc_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_vp		__lsr_real_brk_location LSR_PARAMS ((void));
extern GCC_WARN_UNUSED_RESULT	f_ip		__lsr_real_sbrk_location LSR_PARAMS ((void));


/*# ifndef _ATFILE_SOURCE*/
# if (defined HAVE_RENAMEAT) && (!defined _ATFILE_SOURCE)
extern int LSR_ATTR ((nonnull)) renameat LSR_PARAMS ((int old_dir_fd, const char *oldpath,
					  int new_dir_fd, const char *newpath));
# endif
# if (!defined HAVE_OPENAT)
	/*&& (!defined _ATFILE_SOURCE)*/
extern int openat   LSR_PARAMS ((int dir_fd, const char * pathname, int flags, ...));
# endif
# if (!defined openat64) && (!defined HAVE_OPENAT64)
extern int openat64 LSR_PARAMS ((int dir_fd, const char * pathname, int flags, ...));
# endif
# if (!defined HAVE_UNLINKAT)
	/*&& (!defined _ATFILE_SOURCE)*/
extern int unlinkat LSR_PARAMS ((int dir_fd, const char * pathname, int flags));
# endif

extern int __lsr_main LSR_PARAMS ((void));
extern int GCC_WARN_UNUSED_RESULT __lsr_rand LSR_PARAMS ((void));
extern int GCC_WARN_UNUSED_RESULT __lsr_check_prog_ban LSR_PARAMS ((void));

extern int GCC_WARN_UNUSED_RESULT __lsr_can_wipe_filename
	LSR_PARAMS ((const char * const name, const int follow_links));
extern int GCC_WARN_UNUSED_RESULT __lsr_can_wipe_dirname
	LSR_PARAMS ((const char * const name));
extern int GCC_WARN_UNUSED_RESULT __lsr_can_wipe_filename_atdir
	LSR_PARAMS ((const char * const name, const int dirfd, const int follow_links));
extern int GCC_WARN_UNUSED_RESULT __lsr_can_wipe_filedesc
	LSR_PARAMS ((const int fd));

extern int __lsr_fd_truncate LSR_PARAMS ((const int fd, const off64_t length));
extern void LSR_ATTR ((nonnull)) __lsr_fill_buffer
	LSR_PARAMS ((unsigned long int 		pat_no,
		unsigned char * const 		buffer,
		const size_t 			buflen,
		int * const			selected));	/* lsr_wiping.c */

extern unsigned long int GCC_WARN_UNUSED_RESULT
	__lsr_get_npasses LSR_PARAMS ((void));			/* lsr_wiping.c */
extern int GCC_WARN_UNUSED_RESULT
	__lsr_get_internal_function LSR_PARAMS ((void));	/* lsr_memory.c */
extern void __lsr_set_internal_function LSR_PARAMS ((int a));	/* lsr_memory.c */
extern void __lsr_copy_string LSR_PARAMS ((char * const dest,
	const char src[], const size_t len));			/* libsecrm.c */

# ifdef HAVE_MEMCPY
#  define LSR_MEMCOPY memcpy
# else
extern void __lsr_memcopy LSR_PARAMS ((void * const dest,
	const void * const src, const size_t len));			/* libsecrm.c */
#  define LSR_MEMCOPY __lsr_memcopy
# endif

# ifdef HAVE_MEMSET
#  define LSR_MEMSET memset
# else
extern void __lsr_mem_set LSR_PARAMS ((void * const dest,
	const char value, const size_t len));			/* libsecrm.c */
#  define LSR_MEMSET __lsr_mem_set
# endif

# ifdef __cplusplus
}
# endif

# if (PATH_STYLE==32) || (PATH_STYLE==128)	/* unix or mac */
#  define LSR_PATH_SEP "/"
# else
#  define LSR_PATH_SEP "\\"
# endif
# define LSR_INIT_STAGE_NOT_INITIALIZED 0x55aa
# define LSR_INIT_STAGE_FULLY_INITIALIZED 0x1111

# ifdef HAVE_ERRNO_H
#  ifdef ENOSYS
#   define LSR_SET_ERRNO_MISSING() do { errno = ENOSYS; } while (0)
#  else
#   define LSR_SET_ERRNO_MISSING() do { errno = 38; } while (0)
#  endif
#  define LSR_SET_ERRNO(value) do { errno = value; } while (0)
#  define LSR_GET_ERRNO(variable) do { variable = errno; } while (0)
#  define LSR_MAKE_ERRNO_VAR(name) int name = errno
# else
#  define LSR_SET_ERRNO_MISSING()
#  define LSR_SET_ERRNO(value)
#  define LSR_GET_ERRNO(variable)
#  define LSR_MAKE_ERRNO_VAR(name)
# endif

# ifdef HAVE_SYS_STAT_H
#  ifdef STAT_MACROS_BROKEN
#   if STAT_MACROS_BROKEN
#    error Stat macros broken. Change your C library.
#   endif
#  endif
# endif

# if (defined __GLIBC__) && (defined __GLIBC_MINOR__)
#  if (__GLIBC__ == 2) && (__GLIBC_MINOR__ == 11)
#   warning x
#   warning x Glibc version 2.11 has a bug in dl(v)sym. Read the documentation.
#   warning x
#  endif
# endif

# ifdef LSR_ANSIC
#  define LSR_VOID void
# else
#  define LSR_VOID
# endif

#endif /* LSR_HEADER */
