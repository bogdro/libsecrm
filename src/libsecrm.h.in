/*
 * A library for secure removing files.
 *	-- public header file.
 *
 * Copyright (C) 2007-2019 Bogdan Drozdowski, bogdandr (at) op.pl
 * License: GNU General Public License, v3+
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foudation:
 *		Free Software Foundation
 *		51 Franklin Street, Fifth Floor
 *		Boston, MA 02110-1301
 *		USA
 */

#ifndef _LIBSECRM_H
/* this should be just defined, with no value, to work better with SWIG: */
# define _LIBSECRM_H

/*
 This block allows SWIG (http://www.swig.org) to parse this file and generate
 native bindings to libsecrm for many languages in their desired versions.
 */
# ifdef SWIG
#  undef _LIBSECRM_H
#  undef SWIG
#  define _POSIX_C_SOURCE
#  define _XOPEN_SOURCE
#  define _BSD_SOURCE
#  define _DEFAULT_SOURCE
#  define _LARGEFILE64_SOURCE
#  define _ATFILE_SOURCE
%module libsecrm
%{
#  include "libsecrm.h"
%}
# endif

# ifndef SWIG

#  ifndef _POSIX_C_SOURCE
#   define _POSIX_C_SOURCE 200112L	/* posix_memalign() */
#  endif
#  ifndef _XOPEN_SOURCE
#   define _XOPEN_SOURCE 600		/* brk(), sbrk() */
#  endif
#  ifndef _BSD_SOURCE
#   define _BSD_SOURCE			/* brk(), sbrk(), better compatibility with OpenBSD */
#  endif
#  ifndef _LARGEFILE64_SOURCE
#   define _LARGEFILE64_SOURCE 1
#  endif
#  ifndef _DEFAULT_SOURCE
#   define _DEFAULT_SOURCE 1
#  endif
#  ifndef _ATFILE_SOURCE
#   define _ATFILE_SOURCE 1
#  endif
/*#  define _FILE_OFFSET_BITS 64*/

#  include <sys/types.h>		/* off_t, mode_t, ... */
#  include <stdio.h>		/* FILE */
#  include <stdint.h>
/*
#  ifndef __intptr_t_defined
typedef __intptr_t intptr_t;
#   define __intptr_t_defined
#  endif
*/
#  if (!defined __USE_FILE_OFFSET64) && (!defined __USE_LARGEFILE64)
typedef off_t off64_t;
#  endif

# endif /* SWIG */

/* LSR_PARAMS is a macro used to wrap function prototypes, so that
        compilers that don't understand ANSI C prototypes still work,
        and ANSI C compilers can issue warnings about type mismatches. */
# undef LSR_PARAMS
# if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
#  define LSR_PARAMS(protos) protos
#  define LSR_ANSIC
# else
#  define LSR_PARAMS(protos) ()
#  undef LSR_ANSIC
# endif


# ifdef __cplusplus
extern "C" {
# endif

/* ============ The functions that override the default functions: ======= */

extern FILE* lsr_fopen64	LSR_PARAMS ((const char * const name,
					const char * const mode));
extern FILE* lsr_fopen		LSR_PARAMS ((const char * const name,
					const char * const mode));
extern FILE* lsr_freopen64	LSR_PARAMS ((const char * const path,
					const char * const mode,
					FILE* stream));
extern FILE* lsr_freopen	LSR_PARAMS ((const char * const name,
					const char * const mode,
					FILE* stream));
# ifndef SWIG
/* SWIG doesn't yet support functions with variable number of parameters */

extern int lsr_open64		LSR_PARAMS ((const char * const path,
					const int flags,
					...));
extern int lsr_open		LSR_PARAMS ((const char * const name,
					const int flags,
					...));
extern int lsr_openat64		LSR_PARAMS ((const int dirfd,
					const char * const pathname,
					const int flags,
					...));
extern int lsr_openat		LSR_PARAMS ((const int dirfd,
					const char * const pathname,
					const int flags,
					...));
# else /* defined SWIG */

extern int lsr_open64		LSR_PARAMS ((const char * const path,
					const int flags,
					mode_t mode));
extern int lsr_open		LSR_PARAMS ((const char * const name,
					const int flags,
					mode_t mode));
extern int lsr_openat64		LSR_PARAMS ((const int dirfd,
					const char * const pathname,
					const int flags,
					mode_t mode));
extern int lsr_openat		LSR_PARAMS ((const int dirfd,
					const char * const pathname,
					const int flags,
					mode_t mode));
# endif /* SWIG */

extern int lsr_truncate		LSR_PARAMS ((const char * const path,
					const off_t length));
extern int lsr_truncate64	LSR_PARAMS ((const char * const path,
					const off64_t length));
extern int lsr_ftruncate	LSR_PARAMS ((int fd,
					const off_t length));
extern int lsr_ftruncate64	LSR_PARAMS ((int fd,
					const off64_t length));
extern int lsr_unlink		LSR_PARAMS ((const char * const name));
extern int lsr_unlinkat		LSR_PARAMS ((const int dirfd,
					const char * const name,
					const int flags));
extern int lsr_remove		LSR_PARAMS ((const char * const name));
extern int lsr_creat64		LSR_PARAMS ((const char * const path,
					const mode_t mode));
extern int lsr_creat		LSR_PARAMS ((const char * const path,
					const mode_t mode));
extern int lsr_posix_fallocate	LSR_PARAMS ((int fd, off_t offset, off_t len));
extern int lsr_fallocate	LSR_PARAMS ((int fd, int mode, off_t offset, off_t len));


/* memory-related functions */
extern void * lsr_malloc	LSR_PARAMS ((size_t size));
extern int lsr_posix_memalign	LSR_PARAMS ((void **memptr, size_t alignment, size_t size));
extern void * lsr_valloc	LSR_PARAMS ((size_t size));
extern void * lsr_pvalloc	LSR_PARAMS ((size_t size));
extern void * lsr_memalign	LSR_PARAMS ((size_t boundary, size_t size));
extern void * lsr_aligned_alloc	LSR_PARAMS ((size_t alignment, size_t size));
					/* intentionally more indented: */
extern @BRK_RETTYPE@ lsr_brk		LSR_PARAMS ((@BRK_ARGTYPE@ end_data_segment));
extern @SBRK_RETTYPE@ lsr_sbrk		LSR_PARAMS ((@SBRK_ARGTYPE@ increment));

/* ============ LibSecRm internal functions: ======= */

/**
 * Gets the number of configured wiping passes.
 * \return the number of configured wiping passes.
 */
extern unsigned long int
libsecrm_get_number_of_passes LSR_PARAMS ((void));

/**
 * Fills the given buffer with one of predefined patterns.
 * \param pat_no Pass/pattern number (0-lsr_get_nunmber_of_passes()).
 * \param buffer Buffer to be filled.
 * \param buflen Length of the buffer to fill.
 * \param selected array with 0s or 1s telling which patterns
 *	have already been used.
 */
extern void
libsecrm_fill_buffer LSR_PARAMS ((
		unsigned long int 		pat_no,
		unsigned char * const 		buffer,
		const unsigned int /*size_t*/	buflen,
		int * const			selected ));

/**
 * Enables the use of libsecrm by any program that calls this function.
 * Simply linking the program with libsecrm enables it.
 */
extern void libsecrm_enable LSR_PARAMS ((void));

/**
 * The compile-time version of this library.
 */
# define LSR_VERSION "@VERSION@"

/**
 * Returns the run-time version of this library.
 */
extern const char * libsecrm_version LSR_PARAMS ((void));

/**
 * The name of the environment variable which can point to an
 * additional banning file for programs.
 */
# define LSR_PROG_BANNING_ENV	"LIBSECRM_PROGBANFILE"

/**
 * The name of the environment variable which can point to an
 * additional banning file for files.
 */
# define LSR_FILE_BANNING_ENV	"LIBSECRM_FILEBANFILE"

/**
 * The name of the additional program banning file that can exists in the
 * user's home directories.
 */
# define LSR_PROG_BANNING_USERFILE	".libsecrm.progban"

/**
 * The name of the additional file banning file that can exists in the
 * user's home directories.
 */
# define LSR_FILE_BANNING_USERFILE	".libsecrm.fileban"


# ifdef __cplusplus
}
# endif

#endif	/* _LIBSECRM_H */

