/*
 * LibSecRm - A library for secure removing files.
 *	-- public interface file.
 *
 * @configure_input@
 *
 * Copyright (C) 2007-2024 Bogdan Drozdowski, bogdro (at) users . sourceforge . net
 * License: GNU General Public License, v3+
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "lsr_cfg.h"

#ifndef _LARGEFILE64_SOURCE
# define _LARGEFILE64_SOURCE 1
#endif
#ifndef _ATFILE_SOURCE
# define _ATFILE_SOURCE 1
#endif
/* aligned_alloc() on FreeBSD: enable C11, but disable BSD which enables C99 */
#ifndef _ISOC11_SOURCE
# define _ISOC11_SOURCE 1
#endif
#undef _BSD_SOURCE
#undef _BSD_TYPES

#include "libsecrm.h"

#include <stdio.h>

#ifdef HAVE_STDARG_H
# include <stdarg.h>
#else
# ifdef HAVE_VARARGS_H
#  include <varargs.h>
# endif
#endif

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#else
# ifdef __cplusplus
extern "C" {
# endif

/* Only these need to be defined, because only these get called explicitly. */
extern int truncate LSR_PARAMS ((const char *path, off_t length));
# if (!defined truncate64)
extern int truncate64 LSR_PARAMS ((const char *path, off64_t length));
# endif
extern int ftruncate LSR_PARAMS ((int fd, off_t length));
# if (!defined ftruncate64)
extern int ftruncate64 LSR_PARAMS ((int fd, off64_t length));
# endif

# ifdef __cplusplus
}
# endif
#endif /* HAVE_UNISTD_H */

#ifdef HAVE_FCNTL_H
# include <fcntl.h>
#endif

#ifdef HAVE_MALLOC_H
# include <malloc.h>
#endif

#ifdef HAVE_STDLIB_H
# include <stdlib.h>
#endif

#undef LSR_ATTR
#ifdef __GNUC__
# define LSR_ATTR(x)	__attribute__(x)
#else
# define LSR_ATTR(x)
#endif

#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
# define LSR_ANSIC
#else
# undef LSR_ANSIC
#endif

#ifdef LSR_ANSIC
# ifndef LSR_PARAMS
#  define LSR_PARAMS(protos) protos
# endif
# define LSR_VOID void
#else
# ifndef LSR_PARAMS
#  define LSR_PARAMS(protos) ()
# endif
# define LSR_VOID
#endif

#if (!defined __USE_FILE_OFFSET64) && (!defined __USE_LARGEFILE64)
# define fopen64 fopen
# define open64 open
# define freopen64 freopen
# define creat64 creat
# define truncate64 truncate
# define ftruncate64 ftruncate
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef HAVE_OPENAT
extern int openat LSR_PARAMS((int dirfd, const char *pathname, int flags, ...));
#endif
#ifndef HAVE_OPENAT64
extern int openat64 LSR_PARAMS((int dirfd, const char *pathname, int flags, ...));
#endif
#ifndef HAVE_UNLINKAT
extern int unlinkat LSR_PARAMS((int dirfd, const char *pathname, int flags));
#endif
#ifndef HAVE_MEMALIGN
extern void *memalign LSR_PARAMS((size_t boundary, size_t size));
#endif
#ifndef HAVE_POSIX_MEMALIGN
extern int posix_memalign LSR_PARAMS((void **memptr, size_t alignment, size_t size));
#endif
#ifndef HAVE_FALLOCATE
extern int fallocate LSR_PARAMS((int fd, int mode, off_t offset, off_t len));
#endif
#ifndef HAVE_FALLOCATE64
extern int fallocate64 LSR_PARAMS((int fd, int mode, off64_t offset, off64_t len));
#endif
/* aligned_alloc() on FreeBSD: disable POSIX, enable C11, but disable BSD and
 * X/Open which enable C99 and POSIX back. But since posix_memalign() requires
 * POSIX, we declare it manually.
 */
#if (!defined HAVE_ALIGNED_ALLOC) || (!defined __USE_GNU)
extern void *aligned_alloc LSR_PARAMS((size_t alignment, size_t size));
#endif
#ifndef HAVE_PVALLOC
extern void *pvalloc LSR_PARAMS((size_t size));
#endif
#ifndef HAVE_POSIX_FALLOCATE
extern int posix_fallocate LSR_PARAMS((int fd, off_t offset, off_t len));
#endif
#ifndef HAVE_POSIX_FALLOCATE64
extern int posix_fallocate64 LSR_PARAMS((int fd, off64_t offset, off64_t len));
#endif

#ifndef HAVE_BRK
extern int brk LSR_PARAMS((void * addr));
#endif
#if (defined HAVE_BRK) && ( \
	(defined __DARWIN_C_ANSI) \
	|| (defined __DARWIN_C_FULL) \
	|| (defined __DARWIN_C_LEVEL) /* better than nothing */ \
	)
extern BRK_RETTYPE brk LSR_PARAMS((BRK_ARGTYPE end_data_segment));
#endif

#ifndef HAVE_SBRK
extern void * sbrk LSR_PARAMS((intptr_t incr));
#endif
#if (defined HAVE_SBRK) && ( \
	(defined __DARWIN_C_ANSI) \
	|| (defined __DARWIN_C_FULL) \
	|| (defined __DARWIN_C_LEVEL) /* better than nothing */ \
	)
extern SBRK_RETTYPE sbrk LSR_PARAMS((SBRK_ARGTYPE increment));
#endif

extern unsigned long int __lsr_get_npasses LSR_PARAMS ((void));
extern void
#ifdef LSR_ANSIC
LSR_ATTR ((nonnull))
#endif
__lsr_fill_buffer LSR_PARAMS ((
		unsigned long int 		pat_no,
		unsigned char * const 		buffer,
		const size_t			buflen,
		int * const			selected ));

#ifdef __cplusplus
}
#endif

#ifdef TEST_COMPILE
# ifdef LSR_ANSIC
#  define WAS_LSR_ANSIC
# endif
# undef LSR_ANSIC
# if TEST_COMPILE > 1
#  undef HAVE_MALLOC
# endif
#endif

/* ======================================================= */

FILE*
lsr_fopen64 (
#ifdef LSR_ANSIC
	const char * const name, const char * const mode)
#else
	name, mode)
	const char * const name;
	const char * const mode;
#endif
{
	return fopen64 (name, mode);
}

/* ======================================================= */

FILE*
lsr_fopen (
#ifdef LSR_ANSIC
	const char * const name, const char * const mode)
#else
	name, mode)
	const char * const name;
	const char * const mode;
#endif
{
	return fopen (name, mode);
}

/* ======================================================= */

FILE*
lsr_freopen64 (
#ifdef LSR_ANSIC
	const char * const path, const char * const mode, FILE* stream)
#else
	path, mode, stream)
	const char * const path;
	const char * const mode;
	FILE* stream;
#endif
{
	return freopen64 (path, mode, stream);
}

/* ======================================================= */

FILE*
lsr_freopen (
#ifdef LSR_ANSIC
	const char * const name, const char * const mode, FILE* stream)
#else
	name, mode, stream)
	const char * const name;
	const char * const mode;
	FILE* stream;
#endif
{
	return freopen (name, mode, stream);
}

/* ======================================================= */

#if (defined TEST_COMPILE) && (defined WAS_LSR_ANSIC)
# define LSR_ANSIC 1
#endif

int
lsr_open64 (
#ifdef LSR_ANSIC
	const char * const path, const int flags, ... )
#else
	va_alist )
	va_dcl /* no semicolons here! */
	/*
	path, flags )
	const char * const path;
	const int flags;*/
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
# ifndef LSR_ANSIC
	char * const path;
	int flags;
# endif
	int ret_fd;
	mode_t mode = 0666;

# ifdef LSR_ANSIC
	va_start (args, flags);
# else
	va_start (args);
	path = va_arg (args, char * const);
	flags = va_arg (args, int);
# endif
	if ( (flags & O_CREAT) != 0 )
	{
		mode = (mode_t) va_arg (args, int);
	}

	ret_fd = open64 (path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return open64 (path, flags);
#endif
}

/* ======================================================= */

int
lsr_open (
#ifdef LSR_ANSIC
	const char * const path, const int flags, ... )
#else
	va_alist )
	va_dcl /* no semicolons here! */
	/*
	path, flags )
	const char * const path;
	const int flags;*/
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
# ifndef LSR_ANSIC
	char * const path;
	int flags;
# endif
	int ret_fd;
	mode_t mode = 0666;

# ifdef LSR_ANSIC
	va_start (args, flags);
# else
	va_start (args);
	path = va_arg (args, char * const);
	flags = va_arg (args, int);
# endif
	if ( (flags & O_CREAT) != 0 )
	{
		mode = (mode_t) va_arg (args, int);
	}

	ret_fd = open (path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return open (path, flags);
#endif
}

/* ======================================================= */

int
lsr_openat64 (
#ifdef LSR_ANSIC
	const int dirfd, const char * const path, const int flags, ...)
#else
	va_alist )
	va_dcl /* no semicolons here! */
	/*
	dirfd, path, flags )
	const int dirfd;
	const char * const path;
	const int flags;*/
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
# ifndef LSR_ANSIC
	int dirfd;
	char * const path;
	int flags;
# endif
	int ret_fd;
	mode_t mode = 0666;

# ifdef LSR_ANSIC
	va_start (args, flags);
# else
	va_start (args);
	dirfd = va_arg (args, int);
	path = va_arg (args, char * const);
	flags = va_arg (args, int);
# endif
	if ( (flags & O_CREAT) != 0 )
	{
		mode = (mode_t) va_arg (args, int);
	}

	ret_fd = openat64 (dirfd, path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return openat64 (dirfd, path, flags);
#endif
}

/* ======================================================= */

int
lsr_openat (
#ifdef LSR_ANSIC
	const int dirfd, const char * const path, const int flags, ...)
#else
	va_alist )
	va_dcl /* no semicolons here! */
	/*
	dirfd, path, flags )
	const int dirfd;
	const char * const path;
	const int flags;*/
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
# ifndef LSR_ANSIC
	int dirfd;
	char * const path;
	int flags;
# endif
	int ret_fd;
	mode_t mode = 0666;

# ifdef LSR_ANSIC
	va_start (args, flags);
# else
	va_start (args);
	dirfd = va_arg (args, int);
	path = va_arg (args, char * const);
	flags = va_arg (args, int);
# endif
	if ( (flags & O_CREAT) != 0 )
	{
		mode = (mode_t) va_arg (args, int);
	}

	ret_fd = openat (dirfd, path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return openat (dirfd, path, flags);
#endif
}

/* ======================================================= */

#ifdef TEST_COMPILE
# undef LSR_ANSIC
#endif

int
lsr_truncate (
#ifdef LSR_ANSIC
	const char * const path, const off_t length)
#else
	path, length)
	const char * const path;
	const off_t length;
#endif
{
	return truncate (path, length);
}

/* ======================================================= */

int
lsr_truncate64 (
#ifdef LSR_ANSIC
	const char * const path, const off64_t length)
#else
	path, length)
	const char * const path;
	const off64_t length;
#endif
{
	return truncate64 (path, length);
}

/* ======================================================= */

int
lsr_ftruncate (
#ifdef LSR_ANSIC
	int fd, const off_t length)
#else
	fd, length)
	int fd;
	const off_t length;
#endif
{
	return ftruncate (fd, length);
}

/* ======================================================= */

int
lsr_ftruncate64 (
#ifdef LSR_ANSIC
	int fd, const off64_t length)
#else
	fd, length)
	int fd;
	const off64_t length;
#endif
{
	return ftruncate64 (fd, length);
}

/* ======================================================= */

int
lsr_unlink (
#ifdef LSR_ANSIC
	const char * const name)
#else
	name)
	const char * const name;
#endif
{
	return unlink (name);
}

/* ======================================================= */

int
lsr_unlinkat (
#ifdef LSR_ANSIC
	const int dirfd, const char * const name, const int flags)
#else
	dirfd, name, flags)
	const int dirfd;
	const char * const name;
	const int flags;
#endif
{
	return unlinkat (dirfd, name, flags);
}

/* ======================================================= */

int
lsr_remove (
#ifdef LSR_ANSIC
	const char * const name)
#else
	name)
	const char * const name;
#endif
{
	return remove (name);
}

/* ======================================================= */

int
lsr_rmdir (
#ifdef LSR_ANSIC
	const char * const name)
#else
	name)
	const char * const name;
#endif
{
	return rmdir (name);
}

/* ======================================================= */

int
lsr_creat64 (
#ifdef LSR_ANSIC
	const char * const path, const mode_t mode )
#else
	path, mode )
	const char * const path;
	const mode_t mode;
#endif
{
	return creat64 (path, mode);
}

/* ======================================================= */

int
lsr_creat (
#ifdef LSR_ANSIC
	const char * const path, const mode_t mode )
#else
	path, mode )
	const char * const path;
	const mode_t mode;
#endif
{
	return creat (path, mode);
}

/* ======================================================= */

int
lsr_posix_fallocate (
#ifdef LSR_ANSIC
	int fd, off_t offset, off_t len)
#else
	fd, offset, len)
	int fd;
	off_t offset;
	off_t len;
#endif
{
	return posix_fallocate (fd, offset, len);
}

/* ======================================================= */

int
lsr_posix_fallocate64 (
#ifdef LSR_ANSIC
	int fd, off64_t offset, off64_t len)
#else
	fd, offset, len)
	int fd;
	off64_t offset;
	off64_t len;
#endif
{
	return posix_fallocate64 (fd, offset, len);
}

/* ======================================================= */

int
lsr_fallocate (
#ifdef LSR_ANSIC
	int fd, int mode, off_t offset, off_t len)
#else
	fd, mode, offset, len)
	int fd;
	int mode;
	off_t offset;
	off_t len;
#endif
{
	return fallocate (fd, mode, offset, len);
}

/* ======================================================= */

int
lsr_fallocate64 (
#ifdef LSR_ANSIC
	int fd, int mode, off64_t offset, off64_t len)
#else
	fd, mode, offset, len)
	int fd;
	int mode;
	off64_t offset;
	off64_t len;
#endif
{
	return fallocate64 (fd, mode, offset, len);
}

/* ======================================================= */

void *
lsr_malloc (
#ifdef LSR_ANSIC
	size_t size)
#else
	size)
	size_t size;
#endif
{
	return malloc (size);
}

/* ======================================================= */

int
lsr_posix_memalign (
#ifdef LSR_ANSIC
	void **memptr, size_t alignment, size_t size)
#else
	memptr, alignment, size)
	void **memptr;
	size_t alignment;
	size_t size;
#endif
{
	return posix_memalign (memptr, alignment, size);
}

/* ======================================================= */

void *
lsr_valloc (
#ifdef LSR_ANSIC
	size_t size)
#else
	size)
	size_t size;
#endif
{
	return valloc (size);
}

/* ======================================================= */

void *
lsr_pvalloc (
#ifdef LSR_ANSIC
	size_t size)
#else
	size)
	size_t size;
#endif
{
	return pvalloc (size);
}

/* ======================================================= */

void *
lsr_memalign (
#ifdef LSR_ANSIC
	size_t boundary, size_t size)
#else
	boundary, size)
	size_t boundary;
	size_t size;
#endif
{
	return memalign (boundary, size);
}

/* ======================================================= */

void *
lsr_aligned_alloc (
#ifdef LSR_ANSIC
	size_t alignment, size_t size)
#else
	alignment, size)
	size_t alignment;
	size_t size;
#endif
{
	return aligned_alloc (alignment, size);
}

/* ======================================================= */

@BRK_RETTYPE@
lsr_brk (
#ifdef LSR_ANSIC
	@BRK_ARGTYPE@ end_data_segment)
#else
	end_data_segment)
	@BRK_ARGTYPE@ end_data_segment;
#endif
{
	return brk (end_data_segment);
}

/* ======================================================= */

@SBRK_RETTYPE@
lsr_sbrk (
#ifdef LSR_ANSIC
	@SBRK_ARGTYPE@ increment)
#else
	increment)
	@SBRK_ARGTYPE@ increment;
#endif
{
	return sbrk (increment);
}

/* ======================================================= */

/**
 * Gets the number of configured wiping passes.
 * \return the number of configured wiping passes.
 */
unsigned long int
libsecrm_get_number_of_passes (LSR_VOID)
{
	return __lsr_get_npasses ();
}

/* ======================================================= */

/**
 * Fills the given buffer with one of predefined patterns.
 * \param pat_no Pass/pattern number (0-lsr_get_nunmber_of_passes()).
 * \param buffer Buffer to be filled.
 * \param buflen Length of the buffer to fill.
 * \param selected array with 0s or 1s telling which patterns
 *	have already been used.
 */
void
#ifdef LSR_ANSIC
LSR_ATTR ((nonnull))
#endif
libsecrm_fill_buffer (
#ifdef LSR_ANSIC
		unsigned long int 		pat_no,
		unsigned char * const 		buffer,
		const unsigned int /*size_t*/	buflen,
		int * const			selected )
#else
	pat_no, buffer, buflen, selected )
	unsigned long int 		pat_no;
	unsigned char * const 		buffer;
	const unsigned int /*size_t*/	buflen;
	int * const			selected;
#endif
		/*@requires notnull buffer @*/ /*@sets *buffer @*/
{
	__lsr_fill_buffer (pat_no, buffer, buflen, selected);
}

/* =============================================================== */

/**
 * Enables the use of libsecrm by any program that calls this function.
 * Simply linking the program with libsecrm enables it.
 */
void libsecrm_enable (LSR_VOID)
{
	/* Nothing is required to do here. By the sole fact that a program
	   is calling this function, and is thus linked with this library,
	   is enough. */
}

/* =============================================================== */

/**
 * Returns the run-time version of this library.
 */
const char *
libsecrm_version (LSR_VOID)
{
        return "@VERSION@";
}
