/*
 * A library for secure removing files.
 *	-- public interface file.
 *
 * Copyright (C) 2007-2009 Bogdan Drozdowski, bogdandr (at) op.pl
 * License: GNU General Public License, v3+
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foudation:
 *		Free Software Foundation
 *		51 Franklin Street, Fifth Floor
 *		Boston, MA 02110-1301
 *		USA
 */

#include "lsr_cfg.h"
#include "libsecrm.h"

#ifndef _POSIX_C_SOURCE
# define _POSIX_C_SOURCE 200112L	/* posix_memalign() */
#endif
#ifndef _XOPEN_SOURCE
# define _XOPEN_SOURCE 600		/* brk(), sbrk() */
#endif
#ifndef _LARGEFILE64_SOURCE
# define _LARGEFILE64_SOURCE 1
#endif
#ifndef _ATFILE_SOURCE
# define _ATFILE_SOURCE 1
#endif

#include <stdio.h>

#ifdef HAVE_STDARG_H
# include <stdarg.h>
#else
# ifdef HAVE_VARARGS_H
#  include <varargs.h>
# endif
#endif

#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif

#ifdef HAVE_FCNTL_H
# include <fcntl.h>
#endif

#ifdef HAVE_ERRNO_H
# include <errno.h>
#endif

#ifdef HAVE_MALLOC_H
# include <malloc.h>
#endif

#ifdef HAVE_STDLIB_H
# include <stdlib.h>
#endif

#undef LSR_ATTR
#ifdef __GNUC__
# define LSR_ATTR(x)	__attribute__(x)
#else
# define LSR_ATTR(x)
#endif

#ifndef PARAMS
# if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
#  define PARAMS(protos) protos
# else
#  define PARAMS(protos) ()
# endif
#endif


#if (!defined __USE_FILE_OFFSET64) && (!defined __USE_LARGEFILE64)
# define fopen64 fopen
# define open64 open
# define freopen64 freopen
# define creat64 creat
# define truncate64 truncate
# define ftruncate64 ftruncate
#endif

#ifndef HAVE_OPENAT
extern int openat PARAMS((int dirfd, const char *pathname, int flags, ...));
#endif
#ifndef HAVE_OPENAT64
extern int openat64 PARAMS((int dirfd, const char *pathname, int flags, ...));
#endif
#ifndef HAVE_UNLINKAT
extern int unlinkat PARAMS((int dirfd, const char *pathname, int flags));
#endif
#ifndef HAVE_MEMALIGN
extern void *memalign PARAMS((size_t boundary, size_t size));
#endif
#ifndef HAVE_POSIX_MEMALIGN
extern int posix_memalign PARAMS((void **memptr, size_t alignment, size_t size));
#endif

/* ======================================================= */

FILE*
lsr_fopen64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const name, const char * const mode)
#else
	name, mode)
	const char * const name;
	const char * const mode;
#endif
{
	return fopen64 (name, mode);
}

/* ======================================================= */

FILE*
lsr_fopen (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const name, const char * const mode)
#else
	name, mode)
	const char * const name;
	const char * const mode;
#endif
{
	return fopen (name, mode);
}

/* ======================================================= */

FILE*
lsr_freopen64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const char * const mode, FILE* stream)
#else
	path, mode, stream)
	const char * const path;
	const char * const mode;
	FILE* stream;
#endif
{
	return freopen64 (path, mode, stream);
}

/* ======================================================= */

FILE*
lsr_freopen (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const name, const char * const mode, FILE* stream)
#else
	name, mode, stream)
	const char * const name;
	const char * const mode;
	FILE* stream;
#endif
{
	return freopen (name, mode, stream);
}

/* ======================================================= */

int
lsr_open64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const int flags, ... )
#else
	path, flags, ... )
	const char * const path;
	const int flags;
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
	int ret_fd;
	mode_t mode;

	va_start (args, flags);
	mode = va_arg (args, int);

	ret_fd = open64 (path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return open64 (path, flags);
#endif
}

/* ======================================================= */

int
lsr_open (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const int flags, ... )
#else
	path, flags, ... )
	const char * const path;
	const int flags;
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
	int ret_fd;
	mode_t mode;

	va_start (args, flags);
	mode = va_arg (args, int);

	ret_fd = open (path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return open (path, flags);
#endif
}

/* ======================================================= */

int
lsr_openat64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const int dirfd, const char * const path, const int flags, ...)
#else
	dirfd, path, flags, ...)
	const int dirfd;
	const char * const path;
	const int flags;
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
	int ret_fd;
	mode_t mode;

	va_start (args, flags);
	mode = va_arg (args, int);

	ret_fd = openat64 (dirfd, path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return openat64 (dirfd, path, flags);
#endif
}

/* ======================================================= */

int
lsr_openat (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const int dirfd, const char * const path, const int flags, ...)
#else
	dirfd, path, flags, ...)
	const int dirfd;
	const char * const path;
	const int flags;
#endif
{
#if (defined HAVE_STDARG_H) || (defined HAVE_VARARGS_H)
	va_list args;
	int ret_fd;
	mode_t mode;

	va_start (args, flags);
	mode = va_arg (args, int);

	ret_fd = openat (dirfd, path, flags, mode);
	va_end (args);
	return ret_fd;
#else
	return openat (dirfd, path, flags);
#endif
}

/* ======================================================= */

int
lsr_truncate (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const off_t length)
#else
	path, length)
	const char * const path;
	const off_t length;
#endif
{
	return truncate (path, length);
}

/* ======================================================= */

int
lsr_truncate64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const off64_t length)
#else
	path, length)
	const char * const path;
	const off64_t length;
#endif
{
	return truncate64 (path, length);
}

/* ======================================================= */

int
lsr_ftruncate (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	int fd, const off_t length)
#else
	fd, length)
	int fd;
	const off_t length;
#endif
{
	return ftruncate (fd, length);
}

/* ======================================================= */

int
lsr_ftruncate64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	int fd, const off64_t length)
#else
	fd, length)
	int fd;
	const off64_t length;
#endif
{
	return ftruncate64 (fd, length);
}

/* ======================================================= */

int
lsr_unlink (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const name)
#else
	name)
	const char * const name;
#endif
{
	return unlink (name);
}

/* ======================================================= */

int
lsr_unlinkat (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const int dirfd, const char * const name, const int flags)
#else
	dirfd, name, flags)
	const int dirfd;
	const char * const name;
	const int flags;
#endif
{
	return unlinkat (dirfd, name, flags);
}

/* ======================================================= */

int
lsr_remove (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const name)
#else
	name)
	const char * const name;
#endif
{
	return remove (name);
}

/* ======================================================= */

int
lsr_creat64 (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const mode_t mode )
#else
	path, mode )
	const char * const path;
	const mode_t mode;
#endif
{
	return creat64 (path, mode);
}

/* ======================================================= */

int
lsr_creat (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	const char * const path, const mode_t mode )
#else
	path, mode )
	const char * const path;
	const mode_t mode;
#endif
{
	return creat (path, mode);
}

/* ======================================================= */

void *
lsr_malloc (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	size_t size)
#else
	size)
	size_t size;
#endif
{
	return malloc (size);
}

/* ======================================================= */

int
lsr_posix_memalign (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	void **memptr, size_t alignment, size_t size)
#else
	memptr, alignment, size)
	void **memptr;
	size_t alignment;
	size_t size;
#endif
{
	return posix_memalign (memptr, alignment, size);
}

/* ======================================================= */

void *
lsr_valloc (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	size_t size)
#else
	size)
	size_t size;
#endif
{
	return valloc (size);
}

/* ======================================================= */

void *
lsr_memalign (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	size_t boundary, size_t size)
#else
	boundary, size)
	size_t boundary;
	size_t size;
#endif
{
	return memalign (boundary, size);
}

/* ======================================================= */

@BRK_RETTYPE@
lsr_brk (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	@BRK_ARGTYPE@ end_data_segment)
#else
	end_data_segment)
	@BRK_ARGTYPE@ end_data_segment;
#endif
{
	return brk (end_data_segment);
}

/* ======================================================= */

@SBRK_RETTYPE@
lsr_sbrk (
#if defined (__STDC__) || defined (_AIX) \
	|| (defined (__mips) && defined (_SYSTYPE_SVR4)) \
	|| defined(WIN32) || defined(__cplusplus)
	@SBRK_ARGTYPE@ increment)
#else
	increment)
	@SBRK_ARGTYPE@ increment;
#endif
{
	return sbrk (increment);
}
